package metrics

import (
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

// Metrics holds all Prometheus metrics for the correlator service
type Metrics struct {
	// Counters
	EventsProcessedTotal    prometheus.Counter
	EventsInvalidTotal      prometheus.Counter
	FindingsGeneratedTotal  prometheus.Counter
	FindingsDeduplicatedTotal prometheus.Counter
	RulesEvaluatedTotal     prometheus.Counter

	// Gauges
	RulesLoadedGauge        prometheus.Gauge
	RulesOverridesGauge     prometheus.Gauge
	FindingsInStoreGauge    prometheus.Gauge
	NatsConnectedGauge      prometheus.Gauge

	// Histograms
	EventProcessingDuration prometheus.Histogram
	RuleEvaluationDuration  prometheus.Histogram
}

// NewMetrics creates a new Metrics instance with all Prometheus metrics
func NewMetrics() *Metrics {
	return &Metrics{
		// Counters
		EventsProcessedTotal: promauto.NewCounter(prometheus.CounterOpts{
			Name: "correlator_events_processed_total",
			Help: "Total number of events processed by the correlator",
		}),
		EventsInvalidTotal: promauto.NewCounter(prometheus.CounterOpts{
			Name: "correlator_events_invalid_total",
			Help: "Total number of invalid events received by the correlator",
		}),
		FindingsGeneratedTotal: promauto.NewCounter(prometheus.CounterOpts{
			Name: "correlator_findings_generated_total",
			Help: "Total number of findings generated by the correlator",
		}),
		FindingsDeduplicatedTotal: promauto.NewCounter(prometheus.CounterOpts{
			Name: "correlator_findings_deduplicated_total",
			Help: "Total number of findings deduplicated by the correlator",
		}),
		RulesEvaluatedTotal: promauto.NewCounter(prometheus.CounterOpts{
			Name: "correlator_rules_evaluated_total",
			Help: "Total number of rules evaluated by the correlator",
		}),

		// Gauges
		RulesLoadedGauge: promauto.NewGauge(prometheus.GaugeOpts{
			Name: "correlator_rules_loaded",
			Help: "Number of rules currently loaded by the correlator",
		}),
		RulesOverridesGauge: promauto.NewGauge(prometheus.GaugeOpts{
			Name: "correlator_rules_overrides",
			Help: "Number of rule overrides currently active in the correlator",
		}),
		FindingsInStoreGauge: promauto.NewGauge(prometheus.GaugeOpts{
			Name: "correlator_findings_in_store",
			Help: "Number of findings currently stored in the correlator",
		}),
		NatsConnectedGauge: promauto.NewGauge(prometheus.GaugeOpts{
			Name: "correlator_nats_connected",
			Help: "Whether NATS is connected (1 = connected, 0 = disconnected)",
		}),

		// Histograms
		EventProcessingDuration: promauto.NewHistogram(prometheus.HistogramOpts{
			Name:    "correlator_event_processing_duration_seconds",
			Help:    "Duration of event processing in seconds",
			Buckets: prometheus.DefBuckets,
		}),
		RuleEvaluationDuration: promauto.NewHistogram(prometheus.HistogramOpts{
			Name:    "correlator_rule_evaluation_duration_seconds",
			Help:    "Duration of rule evaluation in seconds",
			Buckets: prometheus.DefBuckets,
		}),
	}
}

// IncEventsProcessed increments the events processed counter
func (m *Metrics) IncEventsProcessed() {
	m.EventsProcessedTotal.Inc()
}

// IncEventsInvalid increments the invalid events counter
func (m *Metrics) IncEventsInvalid() {
	m.EventsInvalidTotal.Inc()
}

// IncFindingsGenerated increments the findings generated counter
func (m *Metrics) IncFindingsGenerated() {
	m.FindingsGeneratedTotal.Inc()
}

// IncFindingsDeduplicated increments the findings deduplicated counter
func (m *Metrics) IncFindingsDeduplicated() {
	m.FindingsDeduplicatedTotal.Inc()
}

// IncRulesEvaluated increments the rules evaluated counter
func (m *Metrics) IncRulesEvaluated() {
	m.RulesEvaluatedTotal.Inc()
}

// SetRulesLoaded sets the rules loaded gauge
func (m *Metrics) SetRulesLoaded(count float64) {
	m.RulesLoadedGauge.Set(count)
}

// SetRulesOverrides sets the rules overrides gauge
func (m *Metrics) SetRulesOverrides(count float64) {
	m.RulesOverridesGauge.Set(count)
}

// SetFindingsInStore sets the findings in store gauge
func (m *Metrics) SetFindingsInStore(count float64) {
	m.FindingsInStoreGauge.Set(count)
}

// SetNatsConnected sets the NATS connected gauge
func (m *Metrics) SetNatsConnected(connected bool) {
	if connected {
		m.NatsConnectedGauge.Set(1)
	} else {
		m.NatsConnectedGauge.Set(0)
	}
}

// ObserveEventProcessingDuration records the duration of event processing
func (m *Metrics) ObserveEventProcessingDuration(duration float64) {
	m.EventProcessingDuration.Observe(duration)
}

// ObserveRuleEvaluationDuration records the duration of rule evaluation
func (m *Metrics) ObserveRuleEvaluationDuration(duration float64) {
	m.RuleEvaluationDuration.Observe(duration)
}
