// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: protos/ingest.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Ingest_PostEvents_FullMethodName = "/ingest.Ingest/PostEvents"
)

// IngestClient is the client API for Ingest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Ingest service for streaming events
type IngestClient interface {
	// PostEvents streams events for processing
	PostEvents(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Event, Ack], error)
}

type ingestClient struct {
	cc grpc.ClientConnInterface
}

func NewIngestClient(cc grpc.ClientConnInterface) IngestClient {
	return &ingestClient{cc}
}

func (c *ingestClient) PostEvents(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Event, Ack], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Ingest_ServiceDesc.Streams[0], Ingest_PostEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Event, Ack]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Ingest_PostEventsClient = grpc.ClientStreamingClient[Event, Ack]

// IngestServer is the server API for Ingest service.
// All implementations must embed UnimplementedIngestServer
// for forward compatibility.
//
// Ingest service for streaming events
type IngestServer interface {
	// PostEvents streams events for processing
	PostEvents(grpc.ClientStreamingServer[Event, Ack]) error
	mustEmbedUnimplementedIngestServer()
}

// UnimplementedIngestServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIngestServer struct{}

func (UnimplementedIngestServer) PostEvents(grpc.ClientStreamingServer[Event, Ack]) error {
	return status.Errorf(codes.Unimplemented, "method PostEvents not implemented")
}
func (UnimplementedIngestServer) mustEmbedUnimplementedIngestServer() {}
func (UnimplementedIngestServer) testEmbeddedByValue()                {}

// UnsafeIngestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngestServer will
// result in compilation errors.
type UnsafeIngestServer interface {
	mustEmbedUnimplementedIngestServer()
}

func RegisterIngestServer(s grpc.ServiceRegistrar, srv IngestServer) {
	// If the following call pancis, it indicates UnimplementedIngestServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Ingest_ServiceDesc, srv)
}

func _Ingest_PostEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IngestServer).PostEvents(&grpc.GenericServerStream[Event, Ack]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Ingest_PostEventsServer = grpc.ClientStreamingServer[Event, Ack]

// Ingest_ServiceDesc is the grpc.ServiceDesc for Ingest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ingest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ingest.Ingest",
	HandlerType: (*IngestServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PostEvents",
			Handler:       _Ingest_PostEvents_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protos/ingest.proto",
}
