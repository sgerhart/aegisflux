#!/usr/bin/env python3
"""
Test script for Vault integration in CVE sync service.
Tests the Vault client and configuration retrieval.
"""

import asyncio
import os
import sys
from pathlib import Path

# Add the cve_sync module to the path
sys.path.insert(0, str(Path(__file__).parent))

from cve_sync.vault_client import VaultClient, CVEVaultConfig, get_nvd_api_key_from_vault

async def test_vault_client_dev_mode():
    """Test Vault client in development mode."""
    print("üß™ Testing Vault client in development mode...")
    
    async with VaultClient(dev_mode=True) as vault:
        # Test health check
        health = await vault.health_check()
        print(f"Vault health check: {'‚úÖ' if health else '‚ùå'}")
        
        # Test secret retrieval
        api_key = await vault.get_secret("cve-sync/nvd", "api_key")
        print(f"NVD API key: {api_key}")
        
        # Test full secret retrieval
        full_secret = await vault.get_secret("cve-sync/nvd")
        print(f"Full NVD secret: {full_secret}")
        
        # Test non-existent secret
        missing = await vault.get_secret("cve-sync/missing", "field")
        print(f"Missing secret: {missing}")

async def test_cve_vault_config():
    """Test CVE Vault configuration."""
    print("\nüß™ Testing CVE Vault configuration...")
    
    async with VaultClient(dev_mode=True) as vault:
        config = CVEVaultConfig(vault)
        
        # Test API key retrieval
        api_key = await config.get_nvd_api_key()
        print(f"NVD API key: {api_key}")
        
        # Test configuration retrieval
        nvd_config = await config.get_nvd_config()
        print(f"NVD config: {nvd_config}")
        
        # Test individual config values
        rate_limit = await config.get_rate_limit()
        max_pages = await config.get_max_pages()
        retry_attempts = await config.get_retry_attempts()
        timeout = await config.get_timeout()
        
        print(f"Rate limit: {rate_limit}")
        print(f"Max pages: {max_pages}")
        print(f"Retry attempts: {retry_attempts}")
        print(f"Timeout: {timeout}s")

async def test_convenience_function():
    """Test convenience function for API key retrieval."""
    print("\nüß™ Testing convenience function...")
    
    api_key = await get_nvd_api_key_from_vault()
    print(f"API key from convenience function: {api_key}")

async def test_vault_client_production_mode():
    """Test Vault client in production mode (will fail without real Vault)."""
    print("\nüß™ Testing Vault client in production mode...")
    
    # Set environment variables for production mode
    os.environ["VAULT_DEV_MODE"] = "false"
    os.environ["VAULT_ADDR"] = "http://localhost:8200"
    os.environ["VAULT_TOKEN"] = "root"
    
    try:
        async with VaultClient(dev_mode=False) as vault:
            health = await vault.health_check()
            print(f"Vault health check: {'‚úÖ' if health else '‚ùå'}")
            
            if health:
                api_key = await vault.get_secret("cve-sync/nvd", "api_key")
                print(f"NVD API key from production Vault: {api_key}")
            else:
                print("‚ö†Ô∏è  Vault not available - this is expected in test environment")
    except Exception as e:
        print(f"‚ö†Ô∏è  Production mode test failed (expected): {e}")
    finally:
        # Reset to dev mode
        os.environ["VAULT_DEV_MODE"] = "true"

async def main():
    """Run all Vault integration tests."""
    print("üöÄ CVE Sync Vault Integration Tests\n")
    
    try:
        await test_vault_client_dev_mode()
        await test_cve_vault_config()
        await test_convenience_function()
        await test_vault_client_production_mode()
        
        print("\nüéâ All Vault integration tests completed!")
        
    except Exception as e:
        print(f"\n‚ùå Test failed: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
