#!/usr/bin/env python3
"""
Test script for CVE sync service.
Tests the normalization functions and basic functionality.
"""

import json
import asyncio
import sys
import os
from pathlib import Path

# Add the cve_sync module to the path
sys.path.insert(0, str(Path(__file__).parent))

from cve_sync.main import (
    normalize_cvss,
    normalize_cwe,
    normalize_affected_products,
    normalize_references,
    normalize_nvd
)

def test_cvss_normalization():
    """Test CVSS score normalization."""
    print("Testing CVSS normalization...")
    
    # Sample NVD metrics data
    metrics = {
        "cvssMetricV2": [
            {
                "cvssData": {
                    "version": "2.0",
                    "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P",
                    "baseScore": 7.5,
                    "baseSeverity": "HIGH",
                    "accessVector": "NETWORK",
                    "accessComplexity": "LOW",
                    "authentication": "NONE",
                    "confidentialityImpact": "PARTIAL",
                    "integrityImpact": "PARTIAL",
                    "availabilityImpact": "PARTIAL"
                }
            }
        ],
        "cvssMetricV31": [
            {
                "cvssData": {
                    "version": "3.1",
                    "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
                    "baseScore": 9.8,
                    "baseSeverity": "CRITICAL",
                    "attackVector": "NETWORK",
                    "attackComplexity": "LOW",
                    "privilegesRequired": "NONE",
                    "userInteraction": "NONE",
                    "scope": "UNCHANGED",
                    "confidentialityImpact": "HIGH",
                    "integrityImpact": "HIGH",
                    "availabilityImpact": "HIGH"
                }
            }
        ]
    }
    
    result = normalize_cvss(metrics)
    print(f"CVSS normalization result: {json.dumps(result, indent=2)}")
    
    # Verify structure
    assert "base" in result
    assert "v2" in result["base"]
    assert "v3.1" in result["base"]
    assert result["base"]["v2"]["score"] == 7.5
    assert result["base"]["v3.1"]["score"] == 9.8
    
    print("‚úÖ CVSS normalization test passed")

def test_cwe_normalization():
    """Test CWE normalization."""
    print("Testing CWE normalization...")
    
    weaknesses = [
        {
            "description": [
                {
                    "value": "CWE-79",
                    "source": "nvd",
                    "type": "Primary"
                }
            ]
        }
    ]
    
    result = normalize_cwe(weaknesses)
    print(f"CWE normalization result: {json.dumps(result, indent=2)}")
    
    assert len(result) == 1
    assert result[0]["cwe_id"] == "CWE-79"
    assert result[0]["source"] == "nvd"
    
    print("‚úÖ CWE normalization test passed")

def test_affected_products_normalization():
    """Test affected products normalization."""
    print("Testing affected products normalization...")
    
    configurations = [
        {
            "nodes": [
                {
                    "cpeMatch": [
                        {
                            "criteria": "cpe:2.3:a:apache:httpd:2.4.41:*:*:*:*:*:*:*",
                            "vulnerable": True,
                            "versionStartIncluding": "2.4.41",
                            "versionEndExcluding": "2.4.42"
                        }
                    ]
                }
            ]
        }
    ]
    
    result = normalize_affected_products(configurations)
    print(f"Affected products normalization result: {json.dumps(result, indent=2)}")
    
    assert len(result) == 1
    assert result[0]["vendor"] == "apache"
    assert result[0]["product"] == "httpd"
    assert result[0]["version"] == "2.4.41"
    assert result[0]["vulnerable"] == True
    
    print("‚úÖ Affected products normalization test passed")

def test_references_normalization():
    """Test references normalization."""
    print("Testing references normalization...")
    
    references = [
        {
            "url": "https://httpd.apache.org/security/CVE-2023-1234.html",
            "source": "apache",
            "tags": ["Vendor Advisory"]
        }
    ]
    
    result = normalize_references(references)
    print(f"References normalization result: {json.dumps(result, indent=2)}")
    
    assert len(result) == 1
    assert "apache.org" in result[0]["url"]
    assert result[0]["source"] == "apache"
    assert "Vendor Advisory" in result[0]["tags"]
    
    print("‚úÖ References normalization test passed")

def test_full_normalization():
    """Test full CVE normalization."""
    print("Testing full CVE normalization...")
    
    # Sample NVD JSON response
    nvd_json = {
        "vulnerabilities": [
            {
                "cve": {
                    "id": "CVE-2023-1234",
                    "published": "2023-01-01T00:00:00.000",
                    "lastModified": "2023-01-02T00:00:00.000",
                    "descriptions": [
                        {
                            "lang": "en",
                            "value": "A test vulnerability",
                            "source": "nvd"
                        }
                    ],
                    "metrics": {
                        "cvssMetricV31": [
                            {
                                "cvssData": {
                                    "version": "3.1",
                                    "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
                                    "baseScore": 9.8,
                                    "baseSeverity": "CRITICAL"
                                }
                            }
                        ]
                    },
                    "weaknesses": [
                        {
                            "description": [
                                {
                                    "value": "CWE-79",
                                    "source": "nvd",
                                    "type": "Primary"
                                }
                            ]
                        }
                    ],
                    "configurations": [
                        {
                            "nodes": [
                                {
                                    "cpeMatch": [
                                        {
                                            "criteria": "cpe:2.3:a:apache:httpd:2.4.41:*:*:*:*:*:*:*",
                                            "vulnerable": True
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "references": [
                        {
                            "url": "https://httpd.apache.org/security/CVE-2023-1234.html",
                            "source": "apache",
                            "tags": ["Vendor Advisory"]
                        }
                    ]
                }
            }
        ]
    }
    
    result = normalize_nvd(nvd_json)
    print(f"Full normalization result: {json.dumps(result[0], indent=2)}")
    
    assert len(result) == 1
    cve_doc = result[0]
    
    # Verify basic structure
    assert cve_doc["schema_version"] == "1.0"
    assert cve_doc["cve_id"] == "CVE-2023-1234"
    assert cve_doc["source"] == "nvd"
    
    # Verify CVSS data
    assert "cvss" in cve_doc
    assert "base" in cve_doc["cvss"]
    assert "v3.1" in cve_doc["cvss"]["base"]
    
    # Verify CWE data
    assert "cwe" in cve_doc
    assert len(cve_doc["cwe"]) == 1
    assert cve_doc["cwe"][0]["cwe_id"] == "CWE-79"
    
    # Verify affected products
    assert "affected_products" in cve_doc
    assert len(cve_doc["affected_products"]) == 1
    assert cve_doc["affected_products"][0]["vendor"] == "apache"
    
    # Verify references
    assert "references" in cve_doc
    assert len(cve_doc["references"]) == 1
    assert "apache.org" in cve_doc["references"][0]["url"]
    
    print("‚úÖ Full CVE normalization test passed")

def main():
    """Run all tests."""
    print("üß™ Running CVE Sync Tests\n")
    
    try:
        test_cvss_normalization()
        print()
        
        test_cwe_normalization()
        print()
        
        test_affected_products_normalization()
        print()
        
        test_references_normalization()
        print()
        
        test_full_normalization()
        print()
        
        print("üéâ All tests passed!")
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
