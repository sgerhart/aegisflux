"""
Vault client for CVE sync service.
Handles secret retrieval from HashiCorp Vault.
"""

import os
import json
import logging
import aiohttp
from typing import Optional, Dict, Any
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

class VaultClient:
    """Client for interacting with HashiCorp Vault."""
    
    def __init__(self, vault_addr: str = None, vault_token: str = None, dev_mode: bool = True):
        """
        Initialize Vault client.
        
        Args:
            vault_addr: Vault server address (default: from VAULT_ADDR env var)
            vault_token: Vault token (default: from VAULT_TOKEN env var)
            dev_mode: Whether running in development mode
        """
        self.vault_addr = vault_addr or os.getenv("VAULT_ADDR", "http://localhost:8200")
        self.vault_token = vault_token or os.getenv("VAULT_TOKEN", "root")
        self.dev_mode = dev_mode
        self.session = None
        self._secret_cache = {}
        self._cache_ttl = 300  # 5 minutes cache TTL
        
        # Remove trailing slash from vault_addr
        if self.vault_addr.endswith('/'):
            self.vault_addr = self.vault_addr[:-1]
    
    async def __aenter__(self):
        """Async context manager entry."""
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit."""
        if self.session:
            await self.session.close()
    
    async def get_secret(self, path: str, field: str = None) -> Any:
        """
        Retrieve a secret from Vault.
        
        Args:
            path: Vault secret path (e.g., 'secret/data/cve-sync/nvd')
            field: Specific field to retrieve (if None, returns entire secret)
            
        Returns:
            Secret value or None if not found
        """
        if self.dev_mode:
            return self._get_dev_secret(path, field)
        
        # Check cache first
        cache_key = f"{path}:{field or 'all'}"
        if cache_key in self._secret_cache:
            cached_data, timestamp = self._secret_cache[cache_key]
            if datetime.now() - timestamp < timedelta(seconds=self._cache_ttl):
                logger.debug(f"Using cached secret for {cache_key}")
                return cached_data
        
        try:
            # Construct Vault API URL
            if not path.startswith('secret/data/'):
                path = f"secret/data/{path}"
            
            url = f"{self.vault_addr}/v1/{path}"
            headers = {
                "X-Vault-Token": self.vault_token,
                "Content-Type": "application/json"
            }
            
            async with self.session.get(url, headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    secret_data = data.get("data", {}).get("data", {})
                    
                    # Cache the result
                    self._secret_cache[cache_key] = (secret_data, datetime.now())
                    
                    if field:
                        return secret_data.get(field)
                    return secret_data
                elif response.status == 404:
                    logger.warning(f"Secret not found: {path}")
                    return None
                else:
                    error_text = await response.text()
                    logger.error(f"Failed to retrieve secret {path}: {response.status} - {error_text}")
                    return None
                    
        except Exception as e:
            logger.error(f"Error retrieving secret {path}: {e}")
            return None
    
    def _get_dev_secret(self, path: str, field: str = None) -> Any:
        """
        Get secret in development mode (returns mock data).
        
        Args:
            path: Vault secret path
            field: Specific field to retrieve
            
        Returns:
            Mock secret value
        """
        # Mock secrets for development
        dev_secrets = {
            "secret/data/cve-sync/nvd": {
                "api_key": "dev-nvd-api-key-12345",
                "rate_limit": 50,
                "timeout": 30
            },
            "secret/data/cve-sync/config": {
                "max_pages": 10,
                "retry_attempts": 3,
                "cache_ttl": 300
            },
            "cve-sync/nvd": {
                "api_key": "dev-nvd-api-key-12345",
                "rate_limit": 50,
                "timeout": 30
            },
            "cve-sync/config": {
                "max_pages": 10,
                "retry_attempts": 3,
                "cache_ttl": 300
            }
        }
        
        secret_data = dev_secrets.get(path, {})
        
        if field:
            return secret_data.get(field)
        return secret_data
    
    async def health_check(self) -> bool:
        """
        Check if Vault is healthy and accessible.
        
        Returns:
            True if Vault is healthy, False otherwise
        """
        if self.dev_mode:
            return True
        
        try:
            url = f"{self.vault_addr}/v1/sys/health"
            async with self.session.get(url) as response:
                return response.status == 200
        except Exception as e:
            logger.error(f"Vault health check failed: {e}")
            return False

class CVEVaultConfig:
    """Configuration manager for CVE sync using Vault."""
    
    def __init__(self, vault_client: VaultClient = None):
        """
        Initialize CVE Vault configuration.
        
        Args:
            vault_client: Vault client instance (creates new one if None)
        """
        self.vault_client = vault_client or VaultClient()
        self._config_cache = {}
        self._cache_timestamp = None
        self._cache_ttl = 300  # 5 minutes
    
    async def get_nvd_api_key(self) -> Optional[str]:
        """
        Get NVD API key from Vault.
        
        Returns:
            NVD API key or None if not found
        """
        return await self.vault_client.get_secret("cve-sync/nvd", "api_key")
    
    async def get_nvd_config(self) -> Dict[str, Any]:
        """
        Get NVD configuration from Vault.
        
        Returns:
            Dictionary containing NVD configuration
        """
        # Check cache first
        now = datetime.now()
        if (self._config_cache and self._cache_timestamp and 
            now - self._cache_timestamp < timedelta(seconds=self._cache_ttl)):
            return self._config_cache
        
        config = await self.vault_client.get_secret("cve-sync/config")
        if config:
            self._config_cache = config
            self._cache_timestamp = now
        
        return self._config_cache or {}
    
    async def get_rate_limit(self) -> int:
        """Get rate limit from Vault config."""
        config = await self.get_nvd_config()
        return config.get("rate_limit", 50)
    
    async def get_max_pages(self) -> Optional[int]:
        """Get max pages from Vault config."""
        config = await self.get_nvd_config()
        return config.get("max_pages")
    
    async def get_retry_attempts(self) -> int:
        """Get retry attempts from Vault config."""
        config = await self.get_nvd_config()
        return config.get("retry_attempts", 3)
    
    async def get_timeout(self) -> int:
        """Get timeout from Vault config."""
        config = await self.get_nvd_config()
        return config.get("timeout", 30)

# Convenience function for easy integration
async def get_nvd_api_key_from_vault() -> Optional[str]:
    """
    Convenience function to get NVD API key from Vault.
    
    Returns:
        NVD API key or None if not found
    """
    async with VaultClient() as vault:
        config = CVEVaultConfig(vault)
        return await config.get_nvd_api_key()
